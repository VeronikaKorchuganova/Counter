{"ast":null,"code":"import { createAction, createReducer } from '@reduxjs/toolkit';\nconst defaultState = {\n  count: 0,\n  blocked: false\n};\nexport const increment = createAction('ADD_1');\nexport const setCount = createAction('SET_COUNT', payload => ({\n  payload\n}));\nexport const toggleCounter = createAction('TOGGLE_COUNTER');\nexport const countReducer = createReducer(defaultState, {\n  [increment]: state => ({ ...state,\n    count: state.blocked ? state.count : state.count + 1\n  })\n}); // export const countReducer = (state = defaultState, { type, payload }) => {\n//   switch (type) {\n//     case \"ADD_1\":\n//       return {...state, count: (state.blocked == 0) ? state.count + 1 : state.count};\n//     case \"SET_COUNT\":\n//       console.log(payload)\n//       return {...state, count: (state.blocked == 0) ? 0 + Number(payload) : state.count};\n//     case \"TOGGLE_COUNTER\":\n//       return {...state, blocked: !state.blocked };\n//     default:\n//       return state;\n//   }\n// }\n// const addIncrement1 = createAction('ADD_1')\n// const addIncrement = createAction('SET_COUNT')\n// const blockCounter = createAction('TOGGLE_COUNTER')\n// export const countReducer = createReducer(defaultState, (builder) => {\n//   builder\n//     .addCase(addIncrement1, (state, action) => {(state.blocked == 0) ? (state.count + 1) : state.count})\n//     .addCase(addIncrement, (state, action) => {(state.blocked == 0) ? (0 + Number(action.payload)) : state.count})\n//     .addCase(blockCounter, (state, action) => {!state.blocked})\n// })","map":{"version":3,"names":["createAction","createReducer","defaultState","count","blocked","increment","setCount","payload","toggleCounter","countReducer","state"],"sources":["/Users/veronika/Documents/MyApplications/task3/src/store/countReducer.js"],"sourcesContent":["import { createAction, createReducer } from '@reduxjs/toolkit'\n\nconst defaultState = {\n    count: 0,\n    blocked: false\n}\n\nexport const increment = createAction('ADD_1');\nexport const setCount = createAction('SET_COUNT', payload => ({payload}));\nexport const toggleCounter = createAction('TOGGLE_COUNTER');\n\nexport const countReducer = createReducer(defaultState, {\n  [increment]: (state) => ({...state, count: state.blocked ? state.count : state.count + 1})\n});\n\n// export const countReducer = (state = defaultState, { type, payload }) => {\n//   switch (type) {\n//     case \"ADD_1\":\n//       return {...state, count: (state.blocked == 0) ? state.count + 1 : state.count};\n//     case \"SET_COUNT\":\n//       console.log(payload)\n//       return {...state, count: (state.blocked == 0) ? 0 + Number(payload) : state.count};\n//     case \"TOGGLE_COUNTER\":\n//       return {...state, blocked: !state.blocked };\n//     default:\n//       return state;\n//   }\n// }\n\n// const addIncrement1 = createAction('ADD_1')\n// const addIncrement = createAction('SET_COUNT')\n// const blockCounter = createAction('TOGGLE_COUNTER')\n\n// export const countReducer = createReducer(defaultState, (builder) => {\n//   builder\n//     .addCase(addIncrement1, (state, action) => {(state.blocked == 0) ? (state.count + 1) : state.count})\n//     .addCase(addIncrement, (state, action) => {(state.blocked == 0) ? (0 + Number(action.payload)) : state.count})\n//     .addCase(blockCounter, (state, action) => {!state.blocked})\n// })\n\n"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,kBAA5C;AAEA,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,CADU;EAEjBC,OAAO,EAAE;AAFQ,CAArB;AAKA,OAAO,MAAMC,SAAS,GAAGL,YAAY,CAAC,OAAD,CAA9B;AACP,OAAO,MAAMM,QAAQ,GAAGN,YAAY,CAAC,WAAD,EAAcO,OAAO,KAAK;EAACA;AAAD,CAAL,CAArB,CAA7B;AACP,OAAO,MAAMC,aAAa,GAAGR,YAAY,CAAC,gBAAD,CAAlC;AAEP,OAAO,MAAMS,YAAY,GAAGR,aAAa,CAACC,YAAD,EAAe;EACtD,CAACG,SAAD,GAAcK,KAAD,KAAY,EAAC,GAAGA,KAAJ;IAAWP,KAAK,EAAEO,KAAK,CAACN,OAAN,GAAgBM,KAAK,CAACP,KAAtB,GAA8BO,KAAK,CAACP,KAAN,GAAc;EAA9D,CAAZ;AADyC,CAAf,CAAlC,C,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}